#ifndef SPELL_DICTIONARY_MAP_H
#define SPELL_DICTIONARY_MAP_H

#include "simple_hash_dictionary.h"

// Check if word exists in hash dictionary
static bool is_word_in_dictionary(const char* word) {
    // Calculate hash for the word
    unsigned int hash = word_hash(word);
    
    // Get the correct bucket based on hash
    const char* const* bucket;
    int bucket_size;
    
    // Determine which bucket to use based on the hash
    switch(hash) {
        // Include all bucket cases
        case 0: bucket = bucket_0; bucket_size = sizeof(bucket_0)/sizeof(char*); break;
        // ... more cases would be generated automatically by the dictionary generation script
        default: return false; // No bucket for this hash
    }
    
    // Search for the word in the bucket
    for (int i = 0; i < bucket_size; i++) {
        if (strcmp(word, bucket[i]) == 0) {
            return true;
        }
    }
    
    return false;
}

// Legacy structure for compatibility - will be refactored later
typedef struct {
    const char* const* words;
    size_t size;
} dictionary_entry_t;

// Helper function to get dictionary for a letter - compatibility wrapper
static inline const dictionary_entry_t* get_dictionary_for_letter(char letter) {
    // This is now just a stub - we don't use letter-based lookup anymore
    return NULL;
}

#endif // SPELL_DICTIONARY_MAP_H